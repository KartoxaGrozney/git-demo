Разработка проекта с графической анимацией объектов на экране представляет собой создание приложения, в котором графические элементы (объекты) динамически перемещаются, изменяются или трансформируются во времени, создавая иллюзию движения и анимации.
Основные аспекты и задачи такого проекта могут включать в себя:
	
1.	Графические объекты: 
Определение и создание различных графических примитивов (фигуры, изображения, текст и т.д.), которые будут участвовать в анимации.
2.	Управление движением:
 Реализация алгоритмов, отвечающих за перемещение, вращение, масштабирование и другие трансформации объектов во времени.
3.	Логика анимации:
 Определение последовательности действий, временных интервалов и триггеров для запуска и контроля анимации объектов.
4.	Обработка ввода пользователя:
 Возможность взаимодействия пользователя с анимированными объектами, например, с помощью мыши или других устройств ввода.
5.	Синхронизация и управление кадрами:
 Обеспечение плавной и синхронизированной анимации путем управления частотой обновления кадров и временными интервалами.
6.	Визуальные эффекты:
 Добавление дополнительных визуальных эффектов, таких как размытие, тени, отражения, чтобы сделать анимацию более реалистичной и привлекательной.
7.	Оптимизация производительности:
 Обеспечение эффективного использования системных ресурсов (процессор, графика) для обеспечения плавной и отзывчивой анимации.
8.	Интеграция с пользовательским интерфейсом:
 Совмещение анимированных элементов с интерактивным графическим интерфейсом пользователя.

Разработка проекта с графической анимацией объектов на экране (простейшей игры?)
Для решения данной задачи было создано два окна: одно основное-меню, само окно с игрой:
game_foto1
game_foto2   

В результате выполнения программы были реализованы следующие функционалы кнопок:

1. Кнопка закрытия программы:
void MainWindow::on_ButtonExit_clicked()
{
    QCoreApplication::quit();
}
2. Кнопка открытия нового окна:
void MainWindow::on_ButtonNewGame_clicked()
{
    CustomWindow *newWindow = new CustomWindow(this);
    newWindow->showFullScreen();

    QPixmap cursorPixmap("C:/Proga/Qt/QT/LabaChuchelo/images/bita.png");
    QSize newSize = cursorPixmap.size() / 5;
    cursorPixmap = cursorPixmap.scaled(newSize, Qt::KeepAspectRatio);
    QCursor customCursor(cursorPixmap, newSize.width() / 5, newSize.height() / 5);
    newWindow->setCursor(customCursor);
}
3. Кнопка перехода из открытого окна в окно-меню:
// Load the close icon image
    QPixmap closeIcon("C:/Proga/Qt/QT/LabaChuchelo/images/menu.png");
    // Create the close button
    QPointer<QPushButton> buttonClose = new QPushButton(this);
    buttonClose->setObjectName("buttonClose");
    buttonClose->setIcon(closeIcon);
    buttonClose->setIconSize(QSize(80, 80));
    buttonClose->setFixedSize(80, 80); // Set the button size
    buttonClose->setFlat(true);
    buttonClose->move(1800, 30);

    // Connect the button click signal to the close slot
    connect(buttonClose, &QPushButton::clicked, this, &CustomWindow::close);

Во время выполнения данной работы был получен большой опыт работы с таймерами, окнами, фотошопом, перемещением фото по экрану, обработчиком событий мыши, а также опыт работы со звуковым сопровождением в QT.
